{"version":3,"sources":["../src/prepareAppZip.ts"],"names":[],"mappings":";;;;;;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAJA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM,EAAE,GAAG,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;AAAE,EAAA;AAAF,IAAW,OAAO,CAAC,eAAD,CAAxB;;AACA,MAAM;AAAE,EAAA;AAAF,IAAqB,OAAO,CAAC,cAAD,CAAlC;;AAGA,MAAM,GAAG,GAAG,KAAI,wCAAJ,GAAZ;AACA,IAAI,QAAJ;AACA,IAAI,WAAJ;AACA,IAAI,2BAA2B,GAAG,KAAlC;;AAEA,CAAC,MAAK;AACJ,EAAA,QAAQ,GAAG,GAAG,CAAC,IAAf;AACA,EAAA,WAAW,GAAG,GAAG,CAAC,OAAlB;;AACA,MAAI,OAAO,CAAC,QAAR,KAAqB,OAAzB,EAAkC;AAChC,IAAA,OAAO,CAAC,GAAR,CACE,qFADF;AAGA,IAAA,2BAA2B,GAAG,IAA9B;AACA;AACD;;AAED,QAAM,eAAe,GAAG,IAAI,CAAC,IAAL,CACtB,cAAc,EADQ,EAEtB,GAAG,CAAC,UAAJ,GAAiB,sBAAjB,GAA0C,UAFpB,CAAxB;AAKA,QAAM,OAAO,GAAG,GAAG,QAAQ,IAAI,WAAW,UAA1C;AAEA,QAAM,gBAAgB,GAAG,IAAI,CAAC,IAAL,CAAU,eAAV,EAA2B,OAA3B,CAAzB;;AACA,MAAI,EAAE,CAAC,UAAH,CAAc,gBAAd,CAAJ,EAAqC;AACnC,IAAA,2BAA2B,GAAG,IAA9B;AAEA;AACD;;AACD,MAAI;AACF,QAAI,CAAC,EAAE,CAAC,UAAH,CAAc,eAAd,CAAL,EAAqC;AACnC,MAAA,EAAE,CAAC,SAAH,CAAa,eAAb;AACD;;AAED,QAAI,KAAK,GAAG,EAAE,CAAC,WAAH,CAAe,eAAf,CAAZ;;AACA,SAAK,MAAM,QAAX,IAAuB,KAAvB,EAA8B;AAC5B,UAAI,QAAQ,CAAC,QAAT,CAAkB,MAAlB,KAA6B,QAAQ,KAAK,OAA9C,EAAuD;AACrD,QAAA,EAAE,CAAC,UAAH,CAAc,IAAI,CAAC,IAAL,CAAU,eAAV,EAA2B,QAA3B,CAAd;AACD;AACF;;AACD,QAAI,UAAU,GAAG,IAAI,CAAC,SAAL,CAAe,GAAG,CAAC,OAAJ,GAAc,WAA7B,CAAjB;AAEA,IAAA,OAAO,CAAC,GAAR,CAAY,wDAAZ;AACA,QAAI,SAAS,GAAG,IAAI,CAClB,6CAA6C,UAAU,MAAM,gBAAgB,GAD3D,CAApB;AAGA,IAAA,SAAS,CAAC,MAAV,CAAiB,EAAjB,CAAoB,OAApB,EAA8B,IAAD,IAAc;AACzC,UAAI,IAAJ,EAAU;AACR,QAAA,OAAO,CAAC,KAAR,CACE,oDADF,EAEE,IAFF;AAKA,QAAA,2BAA2B,GAAG,IAA9B;AACA,cAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD,OARD,MAQO;AACL,QAAA,2BAA2B,GAAG,IAA9B;AACA,QAAA,OAAO,CAAC,GAAR,CACE,2DADF;AAGD;AACF,KAfD;AAgBD,GAjCD,CAiCE,OAAO,CAAP,EAAU;AACV,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACA,IAAA,2BAA2B,GAAG,IAA9B;AAEA,UAAM,IAAI,KAAJ,CAAU,CAAV,CAAN;AACD;AACF,CA/DD;;AAiEA,SAAS,oCAAT,GAA6C;AAC3C,SAAO,2BAAP;AACD,C","sourcesContent":["const path = require(\"path\");\nconst fs = require(\"fs\");\nconst { exec } = require(\"child_process\");\nconst { getAppCacheDir } = require(\"./AppAdapter\");\nimport { ElectronAppAdapter } from \"./ElectronAppAdapter\";\n\nconst app = new ElectronAppAdapter();\nlet APP_NAME;\nlet APP_VERSION;\nlet isZipCreatedForDiffDownload = false;\n\n(() => {\n  APP_NAME = app.name;\n  APP_VERSION = app.version;\n  if (process.platform === \"win32\") {\n    console.log(\n      \"This method only supports MAC, windows create default app installer on installation\"\n    );\n    isZipCreatedForDiffDownload = true;\n    return;\n  }\n\n  const appCacheDirName = path.join(\n    getAppCacheDir(),\n    app.isPackaged ? `belouga-live-updater` : \"Electron\"\n  );\n\n  const zipName = `${APP_NAME}-${APP_VERSION}-mac.zip`;\n\n  const cacheCurrentFile = path.join(appCacheDirName, zipName);\n  if (fs.existsSync(cacheCurrentFile)) {\n    isZipCreatedForDiffDownload = true;\n\n    return;\n  }\n  try {\n    if (!fs.existsSync(appCacheDirName)) {\n      fs.mkdirSync(appCacheDirName);\n    }\n\n    let files = fs.readdirSync(appCacheDirName);\n    for (const fileName of files) {\n      if (fileName.endsWith(\".zip\") && fileName !== zipName) {\n        fs.unlinkSync(path.join(appCacheDirName, fileName));\n      }\n    }\n    let appZipPath = path.normalize(app.appPath + \"/../../..\");\n\n    console.log(\"App zip file does not exist, Creting zip file in cache\");\n    let createZip = exec(\n      `ditto -c -k --sequesterRsrc --keepParent \"${appZipPath}\" \"${cacheCurrentFile}\"`\n    );\n    createZip.stderr.on(\"close\", (code: any) => {\n      if (code) {\n        console.error(\n          \"Error while creating zip for differential download\",\n          code\n        );\n\n        isZipCreatedForDiffDownload = true;\n        throw new Error(\"Error while creating zip for differential download\");\n      } else {\n        isZipCreatedForDiffDownload = true;\n        console.log(\n          \"Successfully generated zip file for differential download\"\n        );\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    isZipCreatedForDiffDownload = true;\n\n    throw new Error(e);\n  }\n})();\n\nfunction isZipAvailabeForDifferentialDownload(): boolean {\n  return isZipCreatedForDiffDownload;\n}\nexport { isZipAvailabeForDifferentialDownload };\n"],"sourceRoot":""}
