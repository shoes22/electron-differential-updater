{"version":3,"sources":["../src/NsisUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AllPublishOptions,\n  newError,\n  PackageFileInfo,\n  BlockMap,\n  CURRENT_APP_PACKAGE_FILE_NAME,\n  CURRENT_APP_INSTALLER_FILE_NAME\n} from \"builder-util-runtime\";\nimport { spawn } from \"child_process\";\nimport * as path from \"path\";\nimport { gunzipSync } from \"zlib\";\nimport { AppAdapter } from \"./AppAdapter\";\nimport { DownloadUpdateOptions } from \"./AppUpdater\";\nimport { BaseUpdater, InstallOptions } from \"./BaseUpdater\";\nimport { FileWithEmbeddedBlockMapDifferentialDownloader } from \"./differentialDownloader/FileWithEmbeddedBlockMapDifferentialDownloader\";\nimport { GenericDifferentialDownloader } from \"./differentialDownloader/GenericDifferentialDownloader\";\nimport { newUrlFromBase, ResolvedUpdateFileInfo } from \"./main\";\nimport { findFile, Provider } from \"./providers/Provider\";\nimport { unlink } from \"fs-extra\";\nimport { verifySignature } from \"./windowsExecutableCodeSignatureVerifier\";\nimport { URL } from \"url\";\n\nexport class NsisUpdater extends BaseUpdater {\n  constructor(options?: AllPublishOptions | null, app?: AppAdapter) {\n    super(options, app);\n  }\n\n  /*** @private */\n  protected doDownloadUpdate(\n    downloadUpdateOptions: DownloadUpdateOptions\n  ): Promise<Array<string>> {\n    const provider = downloadUpdateOptions.updateInfoAndProvider.provider;\n    const fileInfo = findFile(\n      provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info),\n      \"exe\"\n    )!!;\n    return this.executeDownload({\n      fileExtension: \"exe\",\n      downloadUpdateOptions,\n      fileInfo,\n      task: async (\n        destinationFile,\n        downloadOptions,\n        packageFile,\n        removeTempDirIfAny\n      ) => {\n        if (\n          hasQuotes(destinationFile) ||\n          (packageFile != null && hasQuotes(packageFile))\n        ) {\n          throw newError(\n            `destinationFile or packageFile contains illegal chars`,\n            \"ERR_UPDATER_ILLEGAL_FILE_NAME\"\n          );\n        }\n\n        const packageInfo = fileInfo.packageInfo;\n        const isWebInstaller = packageInfo != null && packageFile != null;\n        if (\n          isWebInstaller ||\n          (await this.differentialDownloadInstaller(\n            fileInfo,\n            downloadUpdateOptions,\n            destinationFile,\n            provider\n          ))\n        ) {\n          await this.httpExecutor.download(\n            fileInfo.url,\n            destinationFile,\n            downloadOptions\n          );\n        }\n\n        const signatureVerificationStatus = await this.verifySignature(\n          destinationFile\n        );\n        if (signatureVerificationStatus != null) {\n          await removeTempDirIfAny();\n          // noinspection ThrowInsideFinallyBlockJS\n          throw newError(\n            `New version ${downloadUpdateOptions.updateInfoAndProvider.info.version} is not signed by the application owner: ${signatureVerificationStatus}`,\n            \"ERR_UPDATER_INVALID_SIGNATURE\"\n          );\n        }\n\n        if (isWebInstaller) {\n          if (\n            await this.differentialDownloadWebPackage(\n              packageInfo!!,\n              packageFile!!,\n              provider\n            )\n          ) {\n            try {\n              await this.httpExecutor.download(\n                new URL(packageInfo!!.path),\n                packageFile!!,\n                {\n                  headers: downloadUpdateOptions.requestHeaders,\n                  cancellationToken: downloadUpdateOptions.cancellationToken,\n                  sha512: packageInfo!!.sha512\n                }\n              );\n            } catch (e) {\n              try {\n                await unlink(packageFile!!);\n              } catch (ignored) {\n                // ignore\n              }\n\n              throw e;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  // $certificateInfo = (Get-AuthenticodeSignature 'xxx\\yyy.exe'\n  // | where {$_.Status.Equals([System.Management.Automation.SignatureStatus]::Valid) -and $_.SignerCertificate.Subject.Contains(\"CN=siemens.com\")})\n  // | Out-String ; if ($certificateInfo) { exit 0 } else { exit 1 }\n  private async verifySignature(\n    tempUpdateFile: string\n  ): Promise<string | null> {\n    let publisherName: Array<string> | string | null;\n    try {\n      publisherName = (await this.configOnDisk.value).publisherName;\n      if (publisherName == null) {\n        return null;\n      }\n    } catch (e) {\n      if (e.code === \"ENOENT\") {\n        // no app-update.yml\n        return null;\n      }\n      throw e;\n    }\n    return await verifySignature(\n      Array.isArray(publisherName) ? publisherName : [publisherName],\n      tempUpdateFile,\n      this._logger\n    );\n  }\n\n  protected doInstall(options: InstallOptions): boolean {\n    const args = [\"--updated\"];\n    if (options.isSilent) {\n      args.push(\"/S\");\n    }\n\n    if (options.isForceRunAfter) {\n      args.push(\"--force-run\");\n    }\n\n    const packagePath =\n      this.downloadedUpdateHelper == null\n        ? null\n        : this.downloadedUpdateHelper.packageFile;\n    if (packagePath != null) {\n      // only = form is supported\n      args.push(`--package-file=${packagePath}`);\n    }\n\n    const callUsingElevation = (): void => {\n      _spawn(\n        path.join(process.resourcesPath!!, \"elevate.exe\"),\n        [options.installerPath].concat(args)\n      ).catch(e => this.dispatchError(e));\n    };\n\n    if (options.isAdminRightsRequired) {\n      this._logger.info(\n        \"isAdminRightsRequired is set to true, run installer using elevate.exe\"\n      );\n      callUsingElevation();\n      return true;\n    }\n\n    _spawn(options.installerPath, args).catch((e: Error) => {\n      // https://github.com/electron-userland/electron-builder/issues/1129\n      // Node 8 sends errors: https://nodejs.org/dist/latest-v8.x/docs/api/errors.html#errors_common_system_errors\n      const errorCode = (e as NodeJS.ErrnoException).code;\n      this._logger.info(\n        `Cannot run installer: error code: ${errorCode}, error message: \"${e.message}\", will be executed again using elevate if EACCES\"`\n      );\n      if (errorCode === \"UNKNOWN\" || errorCode === \"EACCES\") {\n        callUsingElevation();\n      } else {\n        this.dispatchError(e);\n      }\n    });\n    return true;\n  }\n\n  private async differentialDownloadInstaller(\n    fileInfo: ResolvedUpdateFileInfo,\n    downloadUpdateOptions: DownloadUpdateOptions,\n    installerPath: string,\n    provider: Provider<any>\n  ): Promise<boolean> {\n    try {\n      if (\n        this._testOnlyOptions != null &&\n        !this._testOnlyOptions.isUseDifferentialDownload\n      ) {\n        return true;\n      }\n      const getBlockMapUrl = () => {\n        if (\n          fileInfo.info.url.includes(\n            `${downloadUpdateOptions.updateInfoAndProvider.info.version}`\n          )\n        ) {\n          return `${fileInfo.url.pathname}.blockmap`;\n        } else {\n          const { app } = this.app;\n          return `${fileInfo.url.pathname.replace(\n            new RegExp(fileInfo.info.url, \"g\"),\n            `${app.productName || app.name} Setup ${\n              downloadUpdateOptions.updateInfoAndProvider.info.version\n            }.exe`\n          )}.blockmap`;\n        }\n      };\n      const blockMapUrl = getBlockMapUrl();\n      const newBlockMapUrl = newUrlFromBase(blockMapUrl, fileInfo.url);\n      const oldBlockMapUrl = newUrlFromBase(\n        `${blockMapUrl.replace(\n          new RegExp(\n            downloadUpdateOptions.updateInfoAndProvider.info.version,\n            \"g\"\n          ),\n          this.app.version\n        )}`,\n        fileInfo.url\n      );\n      this._logger.info(\n        `Download block maps (old: \"${oldBlockMapUrl.href}\", new: ${newBlockMapUrl.href})`\n      );\n\n      const downloadBlockMap = async (url: URL): Promise<BlockMap> => {\n        const data = await this.httpExecutor.downloadToBuffer(url, {\n          headers: downloadUpdateOptions.requestHeaders,\n          cancellationToken: downloadUpdateOptions.cancellationToken\n        });\n\n        if (data == null || data.length === 0) {\n          throw new Error(`Blockmap \"${url.href}\" is empty`);\n        }\n\n        try {\n          return JSON.parse(gunzipSync(data).toString());\n        } catch (e) {\n          throw new Error(\n            `Cannot parse blockmap \"${url.href}\", error: ${e}, raw data: ${data}`\n          );\n        }\n      };\n\n      const blockMapDataList = await Promise.all([\n        downloadBlockMap(oldBlockMapUrl),\n        downloadBlockMap(newBlockMapUrl)\n      ]);\n      await new GenericDifferentialDownloader(\n        fileInfo.info,\n        this.httpExecutor,\n        {\n          newUrl: fileInfo.url,\n          oldFile: path.join(\n            this.downloadedUpdateHelper!!.cacheDir,\n            CURRENT_APP_INSTALLER_FILE_NAME\n          ),\n          logger: this._logger,\n          newFile: installerPath,\n          isUseMultipleRangeRequest: provider.isUseMultipleRangeRequest,\n          requestHeaders: downloadUpdateOptions.requestHeaders\n        }\n      ).download(\n        blockMapDataList[0],\n        blockMapDataList[1],\n        this.emit.bind(this)\n      );\n      return false;\n    } catch (e) {\n      this._logger.error(\n        `Cannot download differentially, fallback to full download: ${e.stack ||\n          e}`\n      );\n      if (this._testOnlyOptions != null) {\n        // test mode\n        throw e;\n      }\n      return true;\n    }\n  }\n\n  private async differentialDownloadWebPackage(\n    packageInfo: PackageFileInfo,\n    packagePath: string,\n    provider: Provider<any>\n  ): Promise<boolean> {\n    if (packageInfo.blockMapSize == null) {\n      return true;\n    }\n\n    try {\n      await new FileWithEmbeddedBlockMapDifferentialDownloader(\n        packageInfo,\n        this.httpExecutor,\n        {\n          newUrl: new URL(packageInfo.path),\n          oldFile: path.join(\n            this.downloadedUpdateHelper!!.cacheDir,\n            CURRENT_APP_PACKAGE_FILE_NAME\n          ),\n          logger: this._logger,\n          newFile: packagePath,\n          requestHeaders: this.requestHeaders,\n          isUseMultipleRangeRequest: provider.isUseMultipleRangeRequest\n        }\n      ).download();\n    } catch (e) {\n      this._logger.error(\n        `Cannot download differentially, fallback to full download: ${e.stack ||\n          e}`\n      );\n      // during test (developer machine mac or linux) we must throw error\n      return process.platform === \"win32\";\n    }\n    return false;\n  }\n}\n\n/**\n * This handles both node 8 and node 10 way of emitting error when spawning a process\n *   - node 8: Throws the error\n *   - node 10: Emit the error(Need to listen with on)\n */\nasync function _spawn(exe: string, args: Array<string>): Promise<any> {\n  return new Promise((resolve, reject) => {\n    try {\n      const process = spawn(exe, args, {\n        detached: true,\n        stdio: \"ignore\"\n      });\n      process.on(\"error\", error => {\n        reject(error);\n      });\n      process.unref();\n\n      if (process.pid !== undefined) {\n        resolve(true);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nfunction hasQuotes(name: string): boolean {\n  return name.includes(\"'\") || name.includes('\"') || name.includes(\"`\");\n}\n"],"sourceRoot":""}
