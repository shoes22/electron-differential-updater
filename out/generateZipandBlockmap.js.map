{"version":3,"sources":["../src/generateZipandBlockmap.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAE,EAAA;AAAF,IAAe,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAM,EAAE,GAAG,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM,IAAI,GAAG,OAAO,CAAC,SAAD,CAApB;;AACA,MAAM;AAAE,EAAA;AAAF,IAAqB,OAAO,CAAC,iBAAD,CAAlC;;AACA,MAAM,uBAAuB,GAAG,OAAO,CAAC,GAAR,EAAhC;;AACA,MAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,IAAL,CAAU,uBAAV,EAAmC,cAAnC,CAAD,CAA3B;;AAEA,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAZ,CAAkB,WAAnC;AACA,MAAM,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,CAAb,IAAkB,OAAO,CAAC,IAAR,CAAa,CAAb,CAAlB,GAAoC,WAAW,CAAC,OAApE;AACA,MAAM,aAAa,GAAG,IAAI,CAAC,IAAL,CAAU,uBAAV,EAAmC,MAAnC,CAAtB;;AAEA,SAAS,sBAAT,GAA+B;AAC7B,EAAA,OAAO,CAAC,GAAR,CAAY,YAAZ;AAEA,EAAA,QAAQ,CACN,iDAAiD,aAAa,QAAQ,QAAQ,UAAU,aAAa,IAAI,QAAQ,IAAI,WAAW,WAD1H,CAAR;AAIA,EAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ;AAEA,QAAM,yBAAyB,GAAG,IAAI,CAAC,IAAL,CAChC,aADgC,EAEhC,GAAG,QAAQ,IAAI,WAAW,UAFM,CAAlC;;AAKA,MAAI;AACF,QAAI,MAAM,GAAG,QAAQ,CACnB,GAAG,cAAc,sBAAsB,yBAAyB,eAAe,aAAa,IAAI,QAAQ,IAAI,WAAW,uCADpG,CAArB;AAGA,QAAI;AAAE,MAAA,MAAF;AAAU,MAAA;AAAV,QAAmB,IAAI,CAAC,KAAL,CAAW,MAAX,CAAvB;AAEA,UAAM,OAAO,GAAG,IAAI,CAAC,IAAL,CAAU,aAAV,EAAyB,gBAAzB,CAAhB;AACA,QAAI,OAAO,GAAG,IAAI,CAAC,QAAL,CAAc,EAAE,CAAC,YAAH,CAAgB,OAAhB,EAAyB,MAAzB,CAAd,CAAd;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACA,IAAA,OAAO,CAAC,MAAR,GAAiB,MAAjB;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,MAAjB,GAA0B,MAA1B;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,IAAjB,GAAwB,IAAxB;AACA,QAAI,OAAO,GAAG,IAAI,CAAC,QAAL,CAAc,OAAd,CAAd;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACA,IAAA,EAAE,CAAC,aAAH,CAAiB,OAAjB,EAA0B,OAA1B,EAAmC,MAAnC;AACA,IAAA,OAAO,CAAC,GAAR,CACE,kEADF;AAGD,GAlBD,CAkBE,OAAO,CAAP,EAAU;AACV,IAAA,OAAO,CAAC,GAAR,CACE,+DADF,EAEE,CAFF;AAID;AACF,C","sourcesContent":["const path = require(\"path\");\nconst { execSync } = require(\"child_process\");\nconst fs = require(\"fs\");\nconst yaml = require(\"js-yaml\");\nconst { appBuilderPath } = require(\"app-builder-bin\");\nconst currentWorkingDirectory = process.cwd();\nconst packageInfo = require(path.join(currentWorkingDirectory, \"package.json\"));\n\nconst APP_NAME = packageInfo.build.productName;\nconst APP_VERSION = process.argv[2] ? process.argv[2] : packageInfo.version;\nconst APP_DIST_PATH = path.join(currentWorkingDirectory, \"dist\");\n\nfunction generateZipandBlockmap() {\n  console.log(\"Zipping...\");\n\n  execSync(\n    `ditto -V -c  -k --sequesterRsrc --keepParent \"${APP_DIST_PATH}/mac/${APP_NAME}.app\" \"${APP_DIST_PATH}/${APP_NAME}-${APP_VERSION}-mac.zip\"`\n  );\n\n  console.log(\"Zipping Completed\");\n\n  const APP_GENERATED_BINARY_PATH = path.join(\n    APP_DIST_PATH,\n    `${APP_NAME}-${APP_VERSION}-mac.zip`\n  );\n\n  try {\n    let output = execSync(\n      `${appBuilderPath} blockmap --input=\"${APP_GENERATED_BINARY_PATH}\" --output=\"${APP_DIST_PATH}/${APP_NAME}-${APP_VERSION}-mac.zip.blockmap\" --compression=gzip`\n    );\n    let { sha512, size } = JSON.parse(output);\n\n    const ymlPath = path.join(APP_DIST_PATH, \"latest-mac.yml\");\n    let ymlData = yaml.safeLoad(fs.readFileSync(ymlPath, \"utf8\"));\n    console.log(ymlData);\n    ymlData.sha512 = sha512;\n    ymlData.files[0].sha512 = sha512;\n    ymlData.files[0].size = size;\n    let yamlStr = yaml.safeDump(ymlData);\n    console.log(yamlStr);\n    fs.writeFileSync(ymlPath, yamlStr, \"utf8\");\n    console.log(\n      \"Successfully updated YAML file and configurations with blockmap.\"\n    );\n  } catch (e) {\n    console.log(\n      \"Error in updating YAML file and configurations with blockmap.\",\n      e\n    );\n  }\n}\n\nexport { generateZipandBlockmap };\n"],"sourceRoot":""}
