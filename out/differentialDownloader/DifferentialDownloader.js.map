{"version":3,"sources":["../../src/differentialDownloader/DifferentialDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BlockMapDataHolder,\n  createHttpError,\n  DigestTransform,\n  HttpExecutor,\n  configureRequestUrl,\n  configureRequestOptions\n} from \"builder-util-runtime\";\nimport { BlockMap } from \"builder-util-runtime/out/blockMapApi\";\nimport { close, open } from \"fs-extra\";\nimport { createWriteStream } from \"fs\";\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\";\nimport { Logger, DOWNLOAD_PROGRESS } from \"../main\";\nimport { copyData } from \"./DataSplitter\";\nimport { URL } from \"url\";\nimport {\n  computeOperations,\n  Operation,\n  OperationKind\n} from \"./downloadPlanBuilder\";\nimport {\n  checkIsRangesSupported,\n  executeTasksUsingMultipleRangeRequests\n} from \"./multipleRangeDownloader\";\n\nexport interface DifferentialDownloaderOptions {\n  readonly oldFile: string;\n  readonly newUrl: URL;\n  readonly logger: Logger;\n  readonly newFile: string;\n\n  readonly requestHeaders: OutgoingHttpHeaders | null;\n\n  readonly isUseMultipleRangeRequest?: boolean;\n}\n\nexport abstract class DifferentialDownloader {\n  fileMetadataBuffer: Buffer | null = null;\n\n  private readonly logger: Logger;\n\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n  constructor(\n    protected readonly blockAwareFileInfo: BlockMapDataHolder,\n    readonly httpExecutor: HttpExecutor<any>,\n    readonly options: DifferentialDownloaderOptions\n  ) {\n    this.logger = options.logger;\n  }\n\n  createRequestOptions(): RequestOptions {\n    const result = {\n      headers: {\n        ...this.options.requestHeaders,\n        accept: \"*/*\"\n      }\n    };\n    configureRequestUrl(this.options.newUrl, result);\n    // user-agent, cache-control and other common options\n    configureRequestOptions(result);\n    return result;\n  }\n\n  protected doDownload(\n    oldBlockMap: BlockMap,\n    newBlockMap: BlockMap,\n    emit: Function\n  ): Promise<any> {\n    // we don't check other metadata like compressionMethod - generic check that it is make sense to differentially update is suitable for it\n    if (oldBlockMap.version !== newBlockMap.version) {\n      throw new Error(\n        `version is different (${oldBlockMap.version} - ${newBlockMap.version}), full download is required`\n      );\n    }\n\n    const logger = this.logger;\n    const operations = computeOperations(oldBlockMap, newBlockMap, logger);\n    if (logger.debug != null) {\n      logger.debug(JSON.stringify(operations, null, 2));\n    }\n\n    let downloadSize = 0;\n    let copySize = 0;\n    for (const operation of operations) {\n      const length = operation.end - operation.start;\n      if (operation.kind === OperationKind.DOWNLOAD) {\n        downloadSize += length;\n      } else {\n        copySize += length;\n      }\n    }\n\n    const newSize = this.blockAwareFileInfo.size;\n    if (\n      downloadSize +\n        copySize +\n        (this.fileMetadataBuffer == null\n          ? 0\n          : this.fileMetadataBuffer.length) !==\n      newSize\n    ) {\n      throw new Error(\n        `Internal error, size mismatch: downloadSize: ${downloadSize}, copySize: ${copySize}, newSize: ${newSize}`\n      );\n    }\n\n    logger.info(\n      `Full: ${formatBytes(newSize)}, To download: ${formatBytes(\n        downloadSize\n      )} (${Math.round(downloadSize / (newSize / 100))}%)`\n    );\n\n    return this.downloadFile(operations, emit);\n  }\n\n  private downloadFile(tasks: Array<Operation>, emit: Function): Promise<any> {\n    const fdList: Array<OpenedFile> = [];\n    const closeFiles = (): Promise<Array<void>> => {\n      return Promise.all(\n        fdList.map(openedFile => {\n          return close(openedFile.descriptor).catch(e => {\n            this.logger.error(`cannot close file \"${openedFile.path}\": ${e}`);\n          });\n        })\n      );\n    };\n    return this.doDownloadFile(tasks, fdList, emit)\n      .then(closeFiles)\n      .catch(e => {\n        // then must be after catch here (since then always throws error)\n        return closeFiles()\n          .catch(closeFilesError => {\n            // closeFiles never throw error, but just to be sure\n            try {\n              this.logger.error(`cannot close files: ${closeFilesError}`);\n            } catch (errorOnLog) {\n              try {\n                console.error(errorOnLog);\n              } catch (ignored) {\n                // ok, give up and ignore error\n              }\n            }\n            throw e;\n          })\n          .then(() => {\n            throw e;\n          });\n      });\n  }\n\n  private async doDownloadFile(\n    tasks: Array<Operation>,\n    fdList: Array<OpenedFile>,\n    emit: Function\n  ): Promise<any> {\n    let oldFileFd: number;\n    oldFileFd = await open(this.options.oldFile, \"r\");\n    fdList.push({ descriptor: oldFileFd, path: this.options.oldFile });\n    const newFileFd = await open(this.options.newFile, \"w\");\n    fdList.push({ descriptor: newFileFd, path: this.options.newFile });\n    const fileOut = createWriteStream(this.options.newFile, {\n      fd: newFileFd\n    });\n    await new Promise((resolve, reject) => {\n      const streams: Array<any> = [];\n      const digestTransform = new DigestTransform(\n        this.blockAwareFileInfo.sha512\n      );\n      // to simply debug, do manual validation to allow file to be fully written\n      digestTransform.isValidateOnEnd = false;\n      streams.push(digestTransform);\n\n      // noinspection JSArrowFunctionCanBeReplacedWithShorthand\n      fileOut.on(\"finish\", () => {\n        (fileOut.close as any)(() => {\n          // remove from fd list because closed successfully\n          fdList.splice(1, 1);\n          try {\n            digestTransform.validate();\n          } catch (e) {\n            reject(e);\n            return;\n          }\n\n          resolve();\n        });\n      });\n\n      streams.push(fileOut);\n\n      let lastStream = null;\n      for (const stream of streams) {\n        stream.on(\"error\", reject);\n        if (lastStream == null) {\n          lastStream = stream;\n        } else {\n          lastStream = lastStream.pipe(stream);\n        }\n      }\n\n      const firstStream = streams[0];\n      // TASK - use useMultipleRangeRequest property from package.json\n      let w: any;\n      if (this.options.isUseMultipleRangeRequest) {\n        w = executeTasksUsingMultipleRangeRequests(\n          this,\n          tasks,\n          firstStream,\n          oldFileFd,\n          reject\n        );\n        w(0);\n        return;\n      }\n\n      let downloadOperationCount = 0;\n      let actualUrl: string | null = null;\n      this.logger.info(`Differential download: ${this.options.newUrl}`);\n\n      const requestOptions = this.createRequestOptions();\n      (requestOptions as any).redirect = \"manual\";\n\n      w = (index: number): void => {\n        if (index >= tasks.length) {\n          if (this.fileMetadataBuffer != null) {\n            firstStream.write(this.fileMetadataBuffer);\n          }\n          firstStream.end();\n          return;\n        }\n\n        const operation = tasks[index++];\n        if (operation.kind === OperationKind.COPY) {\n          copyData(operation, firstStream, oldFileFd, reject, () => w(index));\n          return;\n        }\n\n        const range = `bytes=${operation.start}-${operation.end - 1}`;\n        requestOptions.headers!!.range = range;\n\n        const debug = this.logger.debug;\n        if (debug != null) {\n          debug(`download range: ${range}`);\n          try {\n            emit(DOWNLOAD_PROGRESS, {\n              transferred: index,\n              total: tasks.length,\n              percent: (index / tasks.length) * 100\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n\n        const request = this.httpExecutor.createRequest(\n          requestOptions,\n          response => {\n            // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n            if (response.statusCode >= 400) {\n              reject(createHttpError(response));\n            }\n\n            response.pipe(firstStream, {\n              end: false\n            });\n            response.once(\"end\", () => {\n              if (++downloadOperationCount === 100) {\n                downloadOperationCount = 0;\n                setTimeout(() => w(index), 1000);\n              } else {\n                w(index);\n              }\n            });\n          }\n        );\n        request.on(\n          \"redirect\",\n          (statusCode: number, method: string, redirectUrl: string) => {\n            this.logger.info(`Redirect to ${removeQuery(redirectUrl)}`);\n            actualUrl = redirectUrl;\n            configureRequestUrl(new URL(actualUrl), requestOptions);\n            request.followRedirect();\n          }\n        );\n        this.httpExecutor.addErrorAndTimeoutHandlers(request, reject);\n        request.end();\n      };\n\n      w(0);\n    });\n  }\n\n  protected async readRemoteBytes(\n    start: number,\n    endInclusive: number\n  ): Promise<Buffer> {\n    const buffer = Buffer.allocUnsafe(endInclusive + 1 - start);\n    const requestOptions = this.createRequestOptions();\n    requestOptions.headers!!.range = `bytes=${start}-${endInclusive}`;\n    let position = 0;\n    await this.request(requestOptions, chunk => {\n      chunk.copy(buffer, position);\n      position += chunk.length;\n    });\n\n    if (position !== buffer.length) {\n      throw new Error(\n        `Received data length ${position} is not equal to expected ${buffer.length}`\n      );\n    }\n    return buffer;\n  }\n\n  private request(\n    requestOptions: RequestOptions,\n    dataHandler: (chunk: Buffer) => void\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = this.httpExecutor.createRequest(\n        requestOptions,\n        response => {\n          if (!checkIsRangesSupported(response, reject)) {\n            return;\n          }\n\n          response.on(\"data\", dataHandler);\n          response.on(\"end\", () => resolve());\n        }\n      );\n      this.httpExecutor.addErrorAndTimeoutHandlers(request, reject);\n      request.end();\n    });\n  }\n}\n\nfunction formatBytes(value: number, symbol = \" KB\"): string {\n  return (\n    new Intl.NumberFormat(\"en\").format((value / 1024).toFixed(2) as any) +\n    symbol\n  );\n}\n\n// safety\nfunction removeQuery(url: string): string {\n  const index = url.indexOf(\"?\");\n  return index < 0 ? url : url.substring(0, index);\n}\n\ninterface OpenedFile {\n  readonly descriptor: number;\n  readonly path: string;\n}\n"],"sourceRoot":""}
