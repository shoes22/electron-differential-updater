{"version":3,"sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CancellationToken,\n  PackageFileInfo,\n  ProgressInfo,\n  UpdateFileInfo,\n  UpdateInfo\n} from \"builder-util-runtime\";\nimport { EventEmitter } from \"events\";\nimport { URL } from \"url\";\nimport { AppUpdater } from \"./AppUpdater\";\nimport { LoginCallback } from \"./electronHttpExecutor\";\n\nexport { AppUpdater, NoOpLogger } from \"./AppUpdater\";\nexport { UpdateInfo };\nexport { CancellationToken } from \"builder-util-runtime\";\nexport { Provider } from \"./providers/Provider\";\nexport { AppImageUpdater } from \"./AppImageUpdater\";\nexport { MacUpdater } from \"./MacUpdater\";\nexport { NsisUpdater } from \"./NsisUpdater\";\nexport { generateZipandBlockmap } from \"./generateZipandBlockmap\";\n\n// autoUpdater to mimic electron bundled autoUpdater\nlet _autoUpdater: any;\n\n// required for jsdoc\nexport declare const autoUpdater: AppUpdater;\n\nfunction doLoadAutoUpdater(): AppUpdater {\n  // tslint:disable:prefer-conditional-expression\n  if (process.platform === \"win32\") {\n    _autoUpdater = new (require(\"./NsisUpdater\")).NsisUpdater();\n  } else if (process.platform === \"darwin\") {\n    _autoUpdater = new (require(\"./MacUpdater\")).MacUpdater();\n  } else {\n    _autoUpdater = new (require(\"./AppImageUpdater\")).AppImageUpdater();\n  }\n  require(\"./prepareAppZip\");\n  return _autoUpdater;\n}\n\nObject.defineProperty(exports, \"autoUpdater\", {\n  enumerable: true,\n  get: () => {\n    return _autoUpdater || doLoadAutoUpdater();\n  }\n});\n\nexport interface ResolvedUpdateFileInfo {\n  readonly url: URL;\n  readonly info: UpdateFileInfo;\n\n  packageInfo?: PackageFileInfo;\n}\n\nexport function getChannelFilename(channel: string): string {\n  return `${channel}.yml`;\n}\n\nexport interface UpdateCheckResult {\n  readonly updateInfo: UpdateInfo;\n\n  readonly downloadPromise?: Promise<Array<string>> | null;\n\n  readonly cancellationToken?: CancellationToken;\n  readonly isZipAvailabeForDifferentialDownload?: Promise<Boolean>;\n\n  /** @deprecated */\n  readonly versionInfo: UpdateInfo;\n}\n\nexport type UpdaterEvents =\n  | \"login\"\n  | \"checking-for-update\"\n  | \"update-available\"\n  | \"update-cancelled\"\n  | \"download-progress\"\n  | \"update-downloaded\"\n  | \"error\";\n\nexport const DOWNLOAD_PROGRESS: UpdaterEvents = \"download-progress\";\nexport const UPDATE_DOWNLOADED: UpdaterEvents = \"update-downloaded\";\n\nexport type LoginHandler = (authInfo: any, callback: LoginCallback) => void;\n\nexport class UpdaterSignal {\n  constructor(private emitter: EventEmitter) {}\n\n  /**\n   * Emitted when an authenticating proxy is [asking for user credentials](https://github.com/electron/electron/blob/master/docs/api/client-request.md#event-login).\n   */\n  login(handler: LoginHandler): void {\n    addHandler(this.emitter, \"login\", handler);\n  }\n\n  progress(handler: (info: ProgressInfo) => void): void {\n    addHandler(this.emitter, DOWNLOAD_PROGRESS, handler);\n  }\n\n  updateDownloaded(handler: (info: UpdateDownloadedEvent) => void): void {\n    addHandler(this.emitter, UPDATE_DOWNLOADED, handler);\n  }\n\n  updateCancelled(handler: (info: UpdateInfo) => void): void {\n    addHandler(this.emitter, \"update-cancelled\", handler);\n  }\n}\n\nexport interface UpdateDownloadedEvent extends UpdateInfo {\n  downloadedFile: string;\n}\n\nconst isLogEvent = false;\n\nfunction addHandler(\n  emitter: EventEmitter,\n  event: UpdaterEvents,\n  handler: (...args: Array<any>) => void\n): void {\n  if (isLogEvent) {\n    emitter.on(event, (...args: Array<any>) => {\n      console.log(\"%s %s\", event, args);\n      handler(...args);\n    });\n  } else {\n    emitter.on(event, handler);\n  }\n}\n\nexport interface Logger {\n  info(message?: any): void;\n\n  warn(message?: any): void;\n\n  error(message?: any): void;\n\n  debug?(message: string): void;\n}\n\n// if baseUrl path doesn't ends with /, this path will be not prepended to passed pathname for new URL(input, base)\n/** @internal */\nexport function newBaseUrl(url: string): URL {\n  const result = new URL(url);\n  if (!result.pathname.endsWith(\"/\")) {\n    result.pathname += \"/\";\n  }\n  return result;\n}\n\n// addRandomQueryToAvoidCaching is false by default because in most cases URL already contains version number,\n// so, it makes sense only for Generic Provider for channel files\nexport function newUrlFromBase(\n  pathname: string,\n  baseUrl: URL,\n  addRandomQueryToAvoidCaching = false\n): URL {\n  const result = new URL(pathname, baseUrl);\n  // search is not propagated (search is an empty string if not specified)\n  const search = baseUrl.search;\n  if (search != null && search.length !== 0) {\n    result.search = search;\n  } else if (addRandomQueryToAvoidCaching) {\n    result.search = `noCache=${Date.now().toString(32)}`;\n  }\n  return result;\n}\n"],"sourceRoot":""}
